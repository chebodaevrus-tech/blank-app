# ultra_streamlit_bot.py
import streamlit as st
import requests
import pandas as pd
import numpy as np
import json
import time
import threading
import plotly.graph_objects as go
from datetime import datetime, timedelta
import sqlite3
import io
import warnings
warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="ULTIMATE AI Trading Bot", 
    page_icon="üöÄ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –°—Ç–∏–ª–∏
st.markdown("""
<style>
    .main-header {
        font-size: 3.5rem;
        background: linear-gradient(45deg, #FF6B6B, #4ECDC4, #45B7D1);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        text-align: center;
        margin-bottom: 2rem;
        font-weight: bold;
    }
    .metric-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1.5rem;
        border-radius: 15px;
        color: white;
        margin: 0.5rem;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }
    .profit-positive { color: #00ff88; font-weight: bold; font-size: 1.2rem; }
    .profit-negative { color: #ff4444; font-weight: bold; font-size: 1.2rem; }
    .section-header {
        font-size: 1.8rem;
        color: #2E86AB;
        margin: 2rem 0 1rem 0;
        border-bottom: 3px solid #2E86AB;
        padding-bottom: 0.5rem;
    }
</style>
""", unsafe_allow_html=True)

class UltimateStreamlitBot:
    def __init__(self):
        # API –∫–ª—é—á–∏
        self.telegram_token = '8301273733:AAHW195lAOkP3h3yVYj61GbZTWv62kzrFas'
        self.telegram_chat_id = '5076991573'
        self.deepseek_key = 'sk-85fb2c68545d45a49a579dd2f1d53af3'
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
        self.init_session_state()
        
    def init_session_state(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
        defaults = {
            'bot_active': False,
            'auto_trading': False,
            'current_balance': 1000.0,
            'initial_balance': 1000.0,
            'trades': [],
            'learning_cycles': 0,
            'market_data': {},
            'user_settings': {
                'risk_level': 'MEDIUM',
                'trading_strategy': 'MOMENTUM',
                'daily_budget': 1000.0,
                'max_trade_size': 100.0
            },
            'ai_insights': [],
            'price_history': {},
            'performance_stats': {
                'total_trades': 0,
                'winning_trades': 0,
                'total_profit': 0.0,
                'best_trade': 0.0,
                'worst_trade': 0.0
            }
        }
        
        for key, value in defaults.items():
            if key not in st.session_state:
                st.session_state[key] = value

    def start_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        st.session_state.bot_active = True
        st.session_state.bot_start_time = datetime.now()
        
        # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        threading.Thread(target=self.market_data_worker, daemon=True).start()
        threading.Thread(target=self.ai_learning_worker, daemon=True).start()
        threading.Thread(target=self.auto_trading_worker, daemon=True).start()
        
        self.send_telegram_message("üöÄ ULTIMATE BOT –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!\n\n–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ Streamlit Cloud")

    def stop_bot(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        st.session_state.bot_active = False
        st.session_state.auto_trading = False
        self.send_telegram_message("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def send_telegram_message(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        try:
            url = f'https://api.telegram.org/bot{self.telegram_token}/sendMessage'
            data = {
                'chat_id': self.telegram_chat_id,
                'text': message,
                'parse_mode': 'HTML'
            }
            requests.post(url, data=data, timeout=5)
            return True
        except:
            return False

    def market_data_worker(self):
        """–§–æ–Ω–æ–≤—ã–π —Å–±–æ—Ä —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        while st.session_state.bot_active:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                market_data = self.get_real_market_data()
                st.session_state.market_data = market_data
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω
                for symbol, data in market_data.items():
                    if symbol not in st.session_state.price_history:
                        st.session_state.price_history[symbol] = []
                    
                    st.session_state.price_history[symbol].append({
                        'timestamp': datetime.now(),
                        'price': data['price'],
                        'change': data['change_24h']
                    })
                    
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
                    if len(st.session_state.price_history[symbol]) > 100:
                        st.session_state.price_history[symbol].pop(0)
                
                time.sleep(60)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            except:
                time.sleep(30)

    def ai_learning_worker(self):
        """–§–æ–Ω–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ AI"""
        while st.session_state.bot_active:
            try:
                st.session_state.learning_cycles += 1
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã
                if st.session_state.learning_cycles % 10 == 0:
                    new_insight = self.generate_ai_insight()
                    st.session_state.ai_insights.append(new_insight)
                    
                    if len(st.session_state.ai_insights) > 20:
                        st.session_state.ai_insights.pop(0)
                
                time.sleep(30)
            except:
                time.sleep(60)

    def auto_trading_worker(self):
        """–§–æ–Ω–æ–≤–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è"""
        while st.session_state.bot_active:
            try:
                if st.session_state.auto_trading:
                    # AI –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ
                    if self.should_execute_trade():
                        trade_result = self.execute_ai_trade()
                        if trade_result:
                            self.send_telegram_message(
                                f"ü§ñ –ê–í–¢–û-–°–î–ï–õ–ö–ê\n"
                                f"üìä {trade_result['symbol']} | {trade_result['action']}\n"
                                f"üí∞ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${trade_result['profit']:+.2f}"
                            )
                
                time.sleep(120)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
            except:
                time.sleep(60)

    def get_real_market_data(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # Binance API
            response = requests.get('https://api.binance.com/api/v3/ticker/24hr', timeout=10)
            if response.status_code == 200:
                data = response.json()
                market_data = {}
                
                symbols = ['BTCUSDT', 'ETHUSDT', 'SOLUSDT', 'ADAUSDT', 'DOTUSDT']
                for symbol in symbols:
                    symbol_data = next((item for item in data if item['symbol'] == symbol), None)
                    if symbol_data:
                        market_data[symbol] = {
                            'price': float(symbol_data['lastPrice']),
                            'change_24h': float(symbol_data['priceChangePercent']),
                            'volume': float(symbol_data['volume']),
                            'high': float(symbol_data['highPrice']),
                            'low': float(symbol_data['lowPrice'])
                        }
                
                return market_data
        except:
            pass
        
        # Fallback –¥–∞–Ω–Ω—ã–µ
        return self.get_simulated_market_data()

    def get_simulated_market_data(self):
        """–°–∏–º—É–ª—è—Ü–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        base_prices = {
            'BTCUSDT': 65000,
            'ETHUSDT': 3500, 
            'SOLUSDT': 150,
            'ADAUSDT': 0.5,
            'DOTUSDT': 7.0
        }
        
        market_data = {}
        for symbol, base_price in base_prices.items():
            change = np.random.uniform(-8, 8)
            market_data[symbol] = {
                'price': base_price * (1 + change/100),
                'change_24h': change,
                'volume': np.random.uniform(1000000, 50000000),
                'high': base_price * (1 + np.random.uniform(0, 0.1)),
                'low': base_price * (1 - np.random.uniform(0, 0.1))
            }
        
        return market_data

    def should_execute_trade(self):
        """AI —Ä–µ—à–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–¥–µ–ª–∫–∏"""
        if len(st.session_state.trades) >= 50:  # –õ–∏–º–∏—Ç —Å–¥–µ–ª–æ–∫
            return False
        
        # –°–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
        market_volatility = self.calculate_market_volatility()
        recent_performance = self.get_recent_performance()
        
        # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–¥–µ–ª–∫–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        trade_probability = 0.3 + (market_volatility * 0.1) + (recent_performance * 0.2)
        
        return np.random.random() < trade_probability

    def execute_ai_trade(self):
        """–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ AI-—Å–¥–µ–ª–∫–∏"""
        symbols = list(st.session_state.market_data.keys())
        symbol = np.random.choice(symbols)
        
        # AI –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
        market_trend = st.session_state.market_data[symbol]['change_24h']
        if market_trend > 2:
            action = 'BUY'
        elif market_trend < -2:
            action = 'SELL'
        else:
            action = np.random.choice(['BUY', 'SELL'])
        
        # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏
        max_trade = st.session_state.user_settings['max_trade_size']
        trade_size = min(max_trade, st.session_state.current_balance * 0.1)
        
        # –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏
        profit = trade_size * np.random.uniform(-0.15, 0.25)
        
        trade = {
            'symbol': symbol,
            'action': action,
            'amount': trade_size,
            'profit': profit,
            'timestamp': datetime.now(),
            'ai_confidence': np.random.uniform(0.6, 0.9)
        }
        
        st.session_state.trades.append(trade)
        st.session_state.current_balance += profit
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        st.session_state.performance_stats['total_trades'] += 1
        st.session_state.performance_stats['total_profit'] += profit
        
        if profit > 0:
            st.session_state.performance_stats['winning_trades'] += 1
            st.session_state.performance_stats['best_trade'] = max(
                st.session_state.performance_stats['best_trade'], profit
            )
        else:
            st.session_state.performance_stats['worst_trade'] = min(
                st.session_state.performance_stats['worst_trade'], profit
            )
        
        return trade

    def execute_manual_trade(self, symbol, action, amount):
        """–†—É—á–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏"""
        if amount > st.session_state.current_balance:
            return False, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤"
        
        profit = amount * np.random.uniform(-0.1, 0.2)
        
        trade = {
            'symbol': symbol,
            'action': action,
            'amount': amount,
            'profit': profit,
            'timestamp': datetime.now(),
            'ai_confidence': 0.0,
            'manual': True
        }
        
        st.session_state.trades.append(trade)
        st.session_state.current_balance += profit
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        st.session_state.performance_stats['total_trades'] += 1
        st.session_state.performance_stats['total_profit'] += profit
        
        if profit > 0:
            st.session_state.performance_stats['winning_trades'] += 1
        
        return True, trade

    def calculate_market_volatility(self):
        """–†–∞—Å—á–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞"""
        if not st.session_state.market_data:
            return 0.5
        
        changes = [data['change_24h'] for data in st.session_state.market_data.values()]
        return np.std(changes) / 100  # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è

    def get_recent_performance(self):
        """–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–¥–µ–ª–æ–∫"""
        if len(st.session_state.trades) < 5:
            return 0.5
        
        recent_trades = st.session_state.trades[-5:]
        win_rate = len([t for t in recent_trades if t['profit'] > 0]) / len(recent_trades)
        return win_rate

    def generate_ai_insight(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI –∏–Ω—Å–∞–π—Ç–æ–≤"""
        insights = [
            "üìà –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω '–£—Ç—Ä–µ–Ω–Ω—è—è –∑–≤–µ–∑–¥–∞' –≤ BTC",
            "üìä –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã RSI –¥–ª—è —Ç–µ–∫—É—â–µ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏",
            "üéØ –£–ª—É—á—à–µ–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö —Ä–∞–∑–≤–æ—Ä–æ—Ç–æ–≤",
            "üí° –í—ã—è–≤–ª–µ–Ω–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è BTC/ETH –≤ –±–æ–∫–æ–≤–æ–º –¥–≤–∏–∂–µ–Ω–∏–∏",
            "‚ö° –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–∞ –Ω–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –≤—Ö–æ–¥–∞ –ø–æ –æ–±—ä–µ–º–∞–º",
            "üõ°Ô∏è –£–ª—É—á—à–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å –¥–ª—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤",
            "üìö –ò–∑—É—á–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω '–ë—Ä–æ—É–¥–µ–Ω–∏–Ω–≥ formation'",
            "üé≤ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–ª–æ–º"
        ]
        
        return {
            'timestamp': datetime.now(),
            'insight': np.random.choice(insights),
            'confidence': np.random.uniform(0.7, 0.95)
        }

    def render_dashboard(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        st.markdown('<div class="main-header">üöÄ ULTIMATE AI TRADING BOT</div>', unsafe_allow_html=True)
        
        # –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
        self.render_status_section()
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        self.render_control_section()
        
        # –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.render_market_section()
        
        # –¢–æ—Ä–≥–æ–≤–ª—è
        self.render_trading_section()
        
        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ–±—É—á–µ–Ω–∏–µ
        self.render_analytics_section()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.render_settings_section()

    def render_status_section(self):
        """–°–µ–∫—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
        st.markdown('<div class="section-header">üìä –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´</div>', unsafe_allow_html=True)
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            total_profit = st.session_state.performance_stats['total_profit']
            profit_class = "profit-positive" if total_profit >= 0 else "profit-negative"
            st.markdown(f"""
            <div class="metric-card">
                <h3>üí∞ –ë–ê–õ–ê–ù–°</h3>
                <p>–¢–µ–∫—É—â–∏–π: ${st.session_state.current_balance:.2f}</p>
                <p class="{profit_class}">–ü—Ä–∏–±—ã–ª—å: ${total_profit:+.2f}</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            win_rate = (st.session_state.performance_stats['winning_trades'] / 
                       st.session_state.performance_stats['total_trades'] * 100 
                       if st.session_state.performance_stats['total_trades'] > 0 else 0)
            st.markdown(f"""
            <div class="metric-card">
                <h3>üìà –¢–û–†–ì–û–í–õ–Ø</h3>
                <p>–°–¥–µ–ª–æ–∫: {st.session_state.performance_stats['total_trades']}</p>
                <p>–í–∏–Ω—Ä–µ–π—Ç: {win_rate:.1f}%</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col3:
            st.markdown(f"""
            <div class="metric-card">
                <h3>üß† AI –û–ë–£–ß–ï–ù–ò–ï</h3>
                <p>–¶–∏–∫–ª–æ–≤: {st.session_state.learning_cycles}</p>
                <p>–ò–Ω—Å–∞–π—Ç–æ–≤: {len(st.session_state.ai_insights)}</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col4:
            status = "üü¢ –ê–ö–¢–ò–í–ï–ù" if st.session_state.bot_active else "üî¥ –í–´–ö–õ–Æ–ß–ï–ù"
            auto_status = "ü§ñ –í–ö–õ" if st.session_state.auto_trading else "‚è∏Ô∏è –í–´–ö–õ"
            st.markdown(f"""
            <div class="metric-card">
                <h3>‚öôÔ∏è –°–¢–ê–¢–£–°</h3>
                <p>–ë–æ—Ç: {status}</p>
                <p>–ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è: {auto_status}</p>
            </div>
            """, unsafe_allow_html=True)

    def render_control_section(self):
        """–°–µ–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        st.markdown('<div class="section-header">üéØ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–û–¢–û–ú</div>', unsafe_allow_html=True)
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if not st.session_state.bot_active:
                if st.button("üöÄ –ó–ê–ü–£–°–¢–ò–¢–¨ –ë–û–¢–ê", type="primary", use_container_width=True):
                    self.start_bot()
                    st.rerun()
            else:
                if st.button("üõë –û–°–¢–ê–ù–û–í–ò–¢–¨ –ë–û–¢–ê", type="secondary", use_container_width=True):
                    self.stop_bot()
                    st.rerun()
        
        with col2:
            if st.session_state.bot_active:
                auto_trading = st.toggle("ü§ñ –ê–í–¢–û-–¢–†–ï–ô–î–ò–ù–ì", st.session_state.auto_trading)
                if auto_trading != st.session_state.auto_trading:
                    st.session_state.auto_trading = auto_trading
                    status = "–≤–∫–ª—é—á–µ–Ω–∞" if auto_trading else "–≤—ã–∫–ª—é—á–µ–Ω–∞"
                    self.send_telegram_message(f"ü§ñ –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è {status}")
        
        with col3:
            if st.button("üìä –û–ë–ù–û–í–ò–¢–¨ –î–ê–ù–ù–´–ï", use_container_width=True):
                st.rerun()

    def render_market_section(self):
        """–°–µ–∫—Ü–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        st.markdown('<div class="section-header">üìà –†–´–ù–û–ß–ù–´–ï –î–ê–ù–ù–´–ï</div>', unsafe_allow_html=True)
        
        if st.session_state.market_data:
            col1, col2 = st.columns([2, 1])
            
            with col1:
                # –¢–∞–±–ª–∏—Ü–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                market_df = pd.DataFrame.from_dict(st.session_state.market_data, orient='index')
                market_df = market_df.reset_index().rename(columns={'index': 'Symbol'})
                market_df['Change Color'] = market_df['change_24h'].apply(
                    lambda x: 'color: #00ff88' if x > 0 else 'color: #ff4444'
                )
                
                # –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                styled_df = market_df[['Symbol', 'price', 'change_24h', 'volume']].copy()
                styled_df.columns = ['–°–∏–º–≤–æ–ª', '–¶–µ–Ω–∞ ($)', '–ò–∑–º–µ–Ω–µ–Ω–∏–µ (%)', '–û–±—ä–µ–º']
                styled_df['–¶–µ–Ω–∞ ($)'] = styled_df['–¶–µ–Ω–∞ ($)'].apply(lambda x: f"${x:,.2f}")
                styled_df['–ò–∑–º–µ–Ω–µ–Ω–∏–µ (%)'] = styled_df['–ò–∑–º–µ–Ω–µ–Ω–∏–µ (%)'].apply(lambda x: f"{x:+.2f}%")
                styled_df['–û–±—ä–µ–º'] = styled_df['–û–±—ä–µ–º'].apply(lambda x: f"${x:,.0f}")
                
                st.dataframe(styled_df, use_container_width=True)
            
            with col2:
                # –ì—Ä–∞—Ñ–∏–∫–∏ —Ü–µ–Ω
                if st.session_state.price_history:
                    fig = go.Figure()
                    
                    for symbol in list(st.session_state.price_history.keys())[:3]:  # –ü–µ—Ä–≤—ã–µ 3 —Å–∏–º–≤–æ–ª–∞
                        history = st.session_state.price_history[symbol]
                        if len(history) > 1:
                            prices = [h['price'] for h in history]
                            times = [h['timestamp'] for h in history]
                            
                            fig.add_trace(go.Scatter(
                                x=times, y=prices,
                                name=symbol,
                                mode='lines'
                            ))
                    
                    fig.update_layout(
                        title="–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω",
                        height=300,
                        showlegend=True
                    )
                    
                    st.plotly_chart(fig, use_container_width=True)

    def render_trading_section(self):
        """–°–µ–∫—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        st.markdown('<div class="section-header">üí∏ –¢–û–†–ì–û–í–õ–Ø</div>', unsafe_allow_html=True)
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üéØ –ë–´–°–¢–†–ê–Ø –°–î–ï–õ–ö–ê")
            
            # –§–æ—Ä–º–∞ –¥–ª—è —Ä—É—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
            with st.form("manual_trade"):
                col_a, col_b, col_c = st.columns(3)
                
                with col_a:
                    symbol = st.selectbox("–°–∏–º–≤–æ–ª", list(st.session_state.market_data.keys()))
                
                with col_b:
                    action = st.selectbox("–î–µ–π—Å—Ç–≤–∏–µ", ["BUY", "SELL"])
                
                with col_c:
                    amount = st.number_input("–°—É–º–º–∞ ($)", min_value=10.0, max_value=1000.0, value=100.0)
                
                if st.form_submit_button("‚ö° –ò–°–ü–û–õ–ù–ò–¢–¨ –°–î–ï–õ–ö–£", type="primary"):
                    success, result = self.execute_manual_trade(symbol, action, amount)
                    if success:
                        st.success(f"–°–¥–µ–ª–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∞! –ü—Ä–∏–±—ã–ª—å: ${result['profit']:+.2f}")
                    else:
                        st.error(result)
                    st.rerun()
        
        with col2:
            st.subheader("üìä –ò–°–¢–û–†–ò–Ø –°–î–ï–õ–û–ö")
            
            if st.session_state.trades:
                # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–¥–µ–ª–æ–∫
                recent_trades = st.session_state.trades[-10:]
                trades_data = []
                
                for trade in reversed(recent_trades):
                    profit_class = "profit-positive" if trade['profit'] >= 0 else "profit-negative"
                    trades_data.append({
                        '–°–∏–º–≤–æ–ª': trade['symbol'],
                        '–î–µ–π—Å—Ç–≤–∏–µ': trade['action'],
                        '–°—É–º–º–∞': f"${trade['amount']:.2f}",
                        '–ü—Ä–∏–±—ã–ª—å': f"${trade['profit']:+.2f}",
                        '–í—Ä–µ–º—è': trade['timestamp'].strftime('%H:%M'),
                        'AI': f"{trade.get('ai_confidence', 0)*100:.1f}%" if 'ai_confidence' in trade else '–†—É—á–Ω–∞—è'
                    })
                
                st.dataframe(pd.DataFrame(trades_data), use_container_width=True)
            else:
                st.info("–°–¥–µ–ª–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç")

    def render_analytics_section(self):
        """–°–µ–∫—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –æ–±—É—á–µ–Ω–∏—è"""
        st.markdown('<div class="section-header">üß† AI –ê–ù–ê–õ–ò–¢–ò–ö–ê –ò –û–ë–£–ß–ï–ù–ò–ï</div>', unsafe_allow_html=True)
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üí° –ü–û–°–õ–ï–î–ù–ò–ï –ò–ù–°–ê–ô–¢–´ AI")
            
            if st.session_state.ai_insights:
                for insight in st.session_state.ai_insights[-5:]:
                    with st.expander(f"{insight['insight']} ({insight['timestamp'].strftime('%H:%M')})"):
                        st.write(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {insight['confidence']:.1%}")
            else:
                st.info("AI –ø–æ–∫–∞ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∏–Ω—Å–∞–π—Ç—ã")
        
        with col2:
            st.subheader("üìä –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨")
            
            # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–∏–±—ã–ª–∏
            if len(st.session_state.trades) > 1:
                trades_df = pd.DataFrame(st.session_state.trades)
                trades_df['cumulative_profit'] = trades_df['profit'].cumsum()
                
                fig = go.Figure()
                fig.add_trace(go.Scatter(
                    x=trades_df['timestamp'],
                    y=trades_df['cumulative_profit'],
                    mode='lines',
                    name='–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å',
                    line=dict(color='#00ff88')
                ))
                
                fig.update_layout(
                    title="–î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–∏–±—ã–ª–∏",
                    height=300,
                    showlegend=True
                )
                
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞")

    def render_settings_section(self):
        """–°–µ–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        st.markdown('<div class="section-header">‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò</div>', unsafe_allow_html=True)
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üìã –ü–ê–†–ê–ú–ï–¢–†–´ –¢–û–†–ì–û–í–õ–ò")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∏—Å–∫–æ–≤
            risk_level = st.selectbox(
                "–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞",
                ["CONSERVATIVE", "MODERATE", "AGGRESSIVE"],
                index=1
            )
            
            trading_strategy = st.selectbox(
                "–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏", 
                ["MOMENTUM", "MEAN_REVERSION", "BREAKOUT", "SCALPING"],
                index=0
            )
            
            if risk_level != st.session_state.user_settings['risk_level']:
                st.session_state.user_settings['risk_level'] = risk_level
            
            if trading_strategy != st.session_state.user_settings['trading_strategy']:
                st.session_state.user_settings['trading_strategy'] = trading_strategy
        
        with col2:
            st.subheader("üí∞ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–ü–ò–¢–ê–õ–û–ú")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—é–¥–∂–µ—Ç–∞
            new_budget = st.number_input(
                "–î–Ω–µ–≤–Ω–æ–π –±—é–¥–∂–µ—Ç ($)",
                min_value=100.0,
                max_value=10000.0,
                value=st.session_state.user_settings['daily_budget']
            )
            
            max_trade = st.number_input(
                "–ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä —Å–¥–µ–ª–∫–∏ ($)",
                min_value=10.0,
                max_value=1000.0,
                value=st.session_state.user_settings['max_trade_size']
            )
            
            if new_budget != st.session_state.user_settings['daily_budget']:
                st.session_state.user_settings['daily_budget'] = new_budget
            
            if max_trade != st.session_state.user_settings['max_trade_size']:
                st.session_state.user_settings['max_trade_size'] = max_trade
            
            if st.button("üíæ –°–û–•–†–ê–ù–ò–¢–¨ –ù–ê–°–¢–†–û–ô–ö–ò"):
                st.success("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
                self.send_telegram_message("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def main():
    bot = UltimateStreamlitBot()
    bot.render_dashboard()

if __name__ == "__main__":
    main()